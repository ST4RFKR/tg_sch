// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();
// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = process.env.TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –î–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let scheduleData = [];
let filter = 'all'; // 'all', 'extra', 'js', 'main'
let visibleSchedule = 1;
let lastMessageId; // –•—Ä–∞–Ω–∏—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API Google Calendar
async function getData() {
  try {
    const res = await fetch(
      'https://www.googleapis.com/calendar/v3/calendars/classroom102613341857294235333%40group.calendar.google.com/events?key=AIzaSyB-JSBKuhkxr0ZaMf-ZXbho0YM13O-GwbY&timeMin=2024-10-07T00%3A00%3A00%2B03%3A00&timeMax=2024-10-31T00%3A00%3A00%2B03%3A00&singleEvents=true&maxResults=9999',
    );
    const data = await res.json();
    scheduleData = data.items;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–æ–≤ —Å API Google Calendar
async function getMentorData() {
  try {
    const res = await fetch(
      'https://www.googleapis.com/calendar/v3/calendars/rralfc724pumjdn5n6r1gpi7k8%40group.calendar.google.com/events?key=AIzaSyB-JSBKuhkxr0ZaMf-ZXbho0YM13O-GwbY&timeMin=2024-10-07T00%3A00%3A00%2B03%3A00&timeMax=2024-10-31T00%3A00%3A00%2B03%3A00&singleEvents=true&maxResults=9999',
    );
    const data = await res.json();
    return data.items;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ' + error);
    return [];
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
getData();

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º
function filterBySprint(data) {
  return data.reduce(
    (acc, el) => {
      for (let i = 1; i <= 5; i++) {
        if (el.summary.includes(`–°–ø—Ä–∏–Ω—Ç 0${i}`)) {
          acc[`s${i}`].push(el);
        }
      }
      return acc;
    },
    { s1: [], s2: [], s3: [], s4: [], s5: [] },
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function renderSchedule(schedule) {
  if (filter === 'extra') {
    schedule = schedule.filter((el) => el.summary.includes('–¥–æ–ø.–∑–∞–Ω—è—Ç–∏–µ'));
  }
  if (filter === 'js') {
    schedule = schedule.filter((el) => el.summary.includes('JS Native'));
  }
  if (filter === 'main') {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–°–ø—Ä–∏–Ω—Ç 0X - " –∏–ª–∏ "–°–ø—Ä–∏–Ω—Ç 0X/online"
    schedule = schedule.filter((el) =>
      /–°–ø—Ä–∏–Ω—Ç 0\d+\s*-\s*|\s*–°–ø—Ä–∏–Ω—Ç 0\d+\/online/.test(el.summary),
    );
  }

  if (schedule.length === 0) {
    return 'üò¢ –ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...';
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
  schedule.sort((a, b) => new Date(a.start.dateTime) - new Date(b.start.dateTime));

  return schedule
    .map((event) => {
      const teacherInfo = event.description?.replace(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]+/g, '') || ''; // –£–±–∏—Ä–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è
      return `üìù ${event.summary}\nüë®üèª‚Äçüè´ ${teacherInfo}\n‚è≥ ${new Date(
        event.start?.dateTime,
      ).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
      })}\n`;
    })
    .join('\n');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: ü§ñ
üóì /start - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üíª‚ú®
  `;

  bot.sendMessage(chatId, welcomeMessage.trim(), {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 01', callback_data: 'sprint_1' },
          { text: '–°–ø—Ä–∏–Ω—Ç 02', callback_data: 'sprint_2' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 03', callback_data: 'sprint_3' },
          { text: '–°–ø—Ä–∏–Ω—Ç 04', callback_data: 'sprint_4' },
        ],
        [{ text: '–°–ø—Ä–∏–Ω—Ç 05', callback_data: 'sprint_5' }],
        [{ text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', callback_data: 'show_support_schedule' }], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('new_chat_members', (msg) => {
  msg.new_chat_members.forEach((newUser) => {
    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${newUser.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É! üéâ
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: ü§ñ
üóì /start - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
–ï—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üíª‚ú®
    `;
    bot.sendMessage(msg.chat.id, welcomeMessage.trim());
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–≤—ã–±–æ—Ä —Å–ø—Ä–∏–Ω—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞
  if (action.startsWith('sprint_')) {
    visibleSchedule = parseInt(action.split('_')[1]);

    const filteredData = filterBySprint(scheduleData);
    const scheduleToShow = filteredData[`s${visibleSchedule}`];

    sendSchedule(chatId, scheduleToShow);
  } else if (action === 'return_to_sprint_selection') {
    filter = 'all';
    returnToSprintSelection(chatId);
  } else if (action === 'show_support_schedule') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const mentorData = await getMentorData();
    const groupedMentorData = groupByDay(mentorData);
    const message = renderMentorSchedule(groupedMentorData);

    bot.sendMessage(chatId, message);
  } else {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...
  }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º
function groupByDay(data) {
  return data.reduce((acc, event) => {
    const eventDate = new Date(event.start.dateTime).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });

    if (!acc[eventDate]) {
      acc[eventDate] = [];
    }
    acc[eventDate].push(event);
    return acc;
  }, {});
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
function renderMentorSchedule(groupedData) {
  const currentDate = new Date(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  const nextWeekDate = new Date(); // –î–∞—Ç–∞ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
  nextWeekDate.setDate(currentDate.getDate() + 7); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
  const messages = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  let currentMessage = ''; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

  if (!Object.keys(groupedData).length) {
    return ['üò¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...'];
  }

  Object.keys(groupedData).forEach((date) => {
    const eventDate = new Date(date);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    if (eventDate < currentDate || eventDate > nextWeekDate) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∏ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    }

    const events = groupedData[date]
      .sort((a, b) => new Date(a.start.dateTime) - new Date(b.start.dateTime)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      .map((event) => {
        const mentorName = event.summary.split(' ')[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–µ–Ω—Ç–æ—Ä–∞
        const mentorDirection = event.summary.split(' ')[2]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Back –∏–ª–∏ Front)
        const eventTime = new Date(event.start?.dateTime).toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
        }); // –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

        return `üìù ${event.summary} ‚è≥ ${eventTime}\n`; // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
      })
      .join('\n');

    currentMessage += `üìÖ ${date}:\n${events}\n\n`;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (currentMessage.length > 4000) {
      messages.push(currentMessage.trim()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
      currentMessage = ''; // –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (currentMessage) {
    messages.push(currentMessage.trim());
  }

  return messages.length > 0 ? messages : ['üò¢ –ù–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π...']; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function sendSchedule(chatId, scheduleToShow) {
  const message = await bot.sendMessage(chatId, renderSchedule(scheduleToShow), {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–í—Å–µ', callback_data: 'filter_all' },
          { text: '–û—Å–Ω–æ–≤–Ω—ã–µ', callback_data: 'filter_main' },
          { text: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', callback_data: 'filter_extra' },
          { text: 'JavaScript', callback_data: 'filter_js' },
          { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø—Ä–∏–Ω—Ç–∞', callback_data: 'return_to_sprint_selection' },
        ],
      ],
    },
  });
  return message.message_id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø—Ä–∏–Ω—Ç–∞
function returnToSprintSelection(chatId) {
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 01', callback_data: 'sprint_1' },
          { text: '–°–ø—Ä–∏–Ω—Ç 02', callback_data: 'sprint_2' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 03', callback_data: 'sprint_3' },
          { text: '–°–ø—Ä–∏–Ω—Ç 04', callback_data: 'sprint_4' },
        ],
        [{ text: '–°–ø—Ä–∏–Ω—Ç 05', callback_data: 'sprint_5' }],
      ],
    },
  });
}
