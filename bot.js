// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { format, addDays, startOfToday } from 'date-fns'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã date-fns
dotenv.config();

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = process.env.TOKEN; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

// –î–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let scheduleData = [];
let mentorScheduleData = [];
let filter = 'all'; // 'all', 'extra', 'js', 'main'
let visibleSchedule = 1;
let lastMessageId; // –•—Ä–∞–Ω–∏—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API Google Calendar
async function getData() {
  try {
    const res = await fetch(
      'https://www.googleapis.com/calendar/v3/calendars/classroom102613341857294235333%40group.calendar.google.com/events?key=AIzaSyB-JSBKuhkxr0ZaMf-ZXbho0YM13O-GwbY&timeMin=2024-10-07T00%3A00%3A00%2B03%3A00&timeMax=2024-10-31T00%3A00%3A00%2B03%3A00&singleEvents=true&maxResults=9999',
    );
    const data = await res.json();
    scheduleData = data.items;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
getData();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–æ–≤
async function getMentorSchedule() {
  const today = startOfToday();
  const timeMin = format(today, "yyyy-MM-dd'T'00:00:00xxx");
  const timeMax = format(addDays(today, 7), "yyyy-MM-dd'T'00:00:00xxx");

  try {
    const res = await fetch(
      `https://www.googleapis.com/calendar/v3/calendars/rralfc724pumjdn5n6r1gpi7k8%40group.calendar.google.com/events?key=AIzaSyB-JSBKuhkxr0ZaMf-ZXbho0YM13O-GwbY&timeMin=${encodeURIComponent(
        timeMin,
      )}&timeMax=${encodeURIComponent(timeMax)}&singleEvents=true&maxResults=9999`,
    );
    const data = await res.json();
    mentorScheduleData = data.items.sort(
      (a, b) => new Date(a.start.dateTime) - new Date(b.start.dateTime),
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º
function filterBySprint(data) {
  return data.reduce(
    (acc, el) => {
      for (let i = 1; i <= 5; i++) {
        if (el.summary.includes(`–°–ø—Ä–∏–Ω—Ç 0${i}`)) {
          acc[`s${i}`].push(el);
        }
      }
      return acc;
    },
    { s1: [], s2: [], s3: [], s4: [], s5: [] },
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
// function renderSchedule(schedule) {
//   if (filter === 'extra') {
//     schedule = schedule.filter((el) => el.summary.includes('–¥–æ–ø.–∑–∞–Ω—è—Ç–∏–µ'));
//   }
//   if (filter === 'js') {
//     schedule = schedule.filter((el) => el.summary.includes('JS Native'));
//   }
//   if (filter === 'main') {
//     schedule = schedule.filter((el) =>
//       /–°–ø—Ä–∏–Ω—Ç 0\d+\s*-\s*|\s*–°–ø—Ä–∏–Ω—Ç 0\d+\/online/.test(el.summary),
//     );
//   }

//   if (schedule.length === 0) {
//     return 'üò¢ –ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...';
//   }

//   // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
//   schedule.sort((a, b) => new Date(a.start.dateTime) - new Date(b.start.dateTime));

//   return schedule
//     .map((event) => {
//       const teacherInfo = event.description?.replace(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]+/g, '') || '';
//       return `üìù ${event.summary}\nüë®üèª‚Äçüè´ ${teacherInfo}\n‚è≥ ${new Date(
//         event.start?.dateTime,
//       ).toLocaleString('ru-RU', {
//         day: '2-digit',
//         month: '2-digit',
//         year: 'numeric',
//         hour: '2-digit',
//         minute: '2-digit',
//         hour12: false,
//       })}\n`;
//     })
//     .join('\n');
// }
function renderSchedule(schedule) {
  if (filter === 'extra') {
    schedule = schedule.filter((el) => el.summary.includes('–¥–æ–ø.–∑–∞–Ω—è—Ç–∏–µ'));
  }
  if (filter === 'js') {
    schedule = schedule.filter((el) => el.summary.includes('JS Native'));
  }
  if (filter === 'main') {
    schedule = schedule.filter((el) =>
      /–°–ø—Ä–∏–Ω—Ç 0\d+\s*-\s*|\s*–°–ø—Ä–∏–Ω—Ç 0\d+\/online/.test(el.summary),
    );
  }

  if (schedule.length === 0) {
    return 'üò¢ –ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...';
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
  schedule.sort((a, b) => new Date(a.start.dateTime) - new Date(b.start.dateTime));

  return schedule
    .map((event) => {
      const teacherInfo = event.description?.replace(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]+/g, '') || '';

      // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
      const eventDate = new Date(event.start?.dateTime);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ 3 —á–∞—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
      eventDate.setHours(eventDate.getHours() + 3); // –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞

      return `üìù ${event.summary}\nüë®üèª‚Äçüè´ ${teacherInfo}\n‚è≥ ${eventDate.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
      })}\n`;
    })
    .join('\n');
}

function renderMentorSchedule(schedule) {
  if (schedule.length === 0) {
    return 'üò¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...';
  }

  const groupedByDate = schedule.reduce((acc, event) => {
    const eventDate = new Date(event.start.dateTime).toLocaleDateString('ru-RU');
    const time = new Date(event.start.dateTime).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    });
    —ë;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "Back", –Ω–æ –Ω–µ "Back/Front"
    const teacherInfo = event.summary || '';
    if (/Back(?!\/Front)/.test(teacherInfo)) {
      return acc; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "Back" –±–µ–∑ "Front"
    }

    acc[eventDate] = acc[eventDate] || [];
    acc[eventDate].push(`    \t${time} ${event.summary}`);
    return acc;
  }, {});

  return Object.entries(groupedByDate)
    .map(([date, events]) => {
      return `${date}\n${events.join('\n')}`;
    })
    .join('\n\n');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: ü§ñ
üóì /start - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üíª‚ú®
  `;

  bot.sendMessage(chatId, welcomeMessage.trim(), {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 01', callback_data: 'sprint_1' },
          { text: '–°–ø—Ä–∏–Ω—Ç 02', callback_data: 'sprint_2' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 03', callback_data: 'sprint_3' },
          { text: '–°–ø—Ä–∏–Ω—Ç 04', callback_data: 'sprint_4' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 05', callback_data: 'sprint_5' },
          { text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–æ–≤', callback_data: 'show_mentors' },
        ],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('new_chat_members', (msg) => {
  msg.new_chat_members.forEach((newUser) => {
    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${newUser.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É! üéâ
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: ü§ñ
üóì /start - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
–ï—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üíª‚ú®
    `;
    bot.sendMessage(msg.chat.id, welcomeMessage.trim());
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞
  if (action.startsWith('sprint_')) {
    visibleSchedule = parseInt(action.split('_')[1]);

    const filteredData = filterBySprint(scheduleData);
    const scheduleToShow = filteredData[`s${visibleSchedule}`];

    lastMessageId = await sendSchedule(chatId, scheduleToShow);
  } else if (action === 'show_mentors') {
    await getMentorSchedule();
    const mentorScheduleMessage = renderMentorSchedule(mentorScheduleData);
    await bot.sendMessage(chatId, mentorScheduleMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø—Ä–∏–Ω—Ç–∞', callback_data: 'return_to_sprint_selection' }],
        ],
      },
    });
  } else if (action === 'return_to_sprint_selection') {
    filter = 'all';
    returnToSprintSelection(chatId);
  } else {
    if (lastMessageId) {
      try {
        await bot.deleteMessage(chatId, lastMessageId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }

    if (action === 'filter_all') {
      filter = 'all';
    } else if (action === 'filter_extra') {
      filter = 'extra';
    } else if (action === 'filter_js') {
      filter = 'js';
    } else if (action === 'filter_main') {
      filter = 'main';
    }

    const filteredData = filterBySprint(scheduleData);
    const scheduleToShow = filteredData[`s${visibleSchedule}`];

    lastMessageId = await sendSchedule(chatId, scheduleToShow);
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function sendSchedule(chatId, scheduleToShow) {
  const message = await bot.sendMessage(chatId, renderSchedule(scheduleToShow), {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–í—Å–µ', callback_data: 'filter_all' },
          { text: '–û—Å–Ω–æ–≤–Ω—ã–µ', callback_data: 'filter_main' },
          { text: '–î–æ–ø. –∑–∞–Ω—è—Ç–∏—è', callback_data: 'filter_extra' },
          { text: 'JS', callback_data: 'filter_js' },
        ],
        [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø—Ä–∏–Ω—Ç–∞', callback_data: 'return_to_sprint_selection' }],
      ],
    },
  });
  return message.message_id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø—Ä–∏–Ω—Ç–∞
function returnToSprintSelection(chatId) {
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 01', callback_data: 'sprint_1' },
          { text: '–°–ø—Ä–∏–Ω—Ç 02', callback_data: 'sprint_2' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 03', callback_data: 'sprint_3' },
          { text: '–°–ø—Ä–∏–Ω—Ç 04', callback_data: 'sprint_4' },
        ],
        [
          { text: '–°–ø—Ä–∏–Ω—Ç 05', callback_data: 'sprint_5' },
          { text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–æ–≤', callback_data: 'show_mentors' },
        ],
      ],
    },
  });
}

//            19.10.2024
// 10:00 ‚ùóÔ∏è–î–ï–ù–ò–° - Front + HTML/CSS
// 10:00 üëë–í–ª–∞–¥ - Back (–¥–æ 31 lvl –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
// 12:00 üê± –ò–≥–Ω–∞—Ç - Back/Front
// 13:30 üç¨–ú–∞—à–∞ - Front + HTML/CSS
// 15:00 üê± –ò–≥–Ω–∞—Ç - Back/Front

// 19.10.2024
//    10:00 ‚ùóÔ∏è–î–ï–ù–ò–° - Front + HTML/CSS
//    10:00 üëë–í–ª–∞–¥ - Back (–¥–æ 31 lvl –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
//    12:00 üê± –ò–≥–Ω–∞—Ç - Back/Front
//    13:30 üç¨–ú–∞—à–∞ - Front + HTML/CSS
//    15:00 üê± –ò–≥–Ω–∞—Ç - Back/Front
